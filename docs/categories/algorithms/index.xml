<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithms on Brendan&#39;s Blog</title>
    <link>https://blichtlealt.github.io/hugo/categories/algorithms/</link>
    <description>Recent content in algorithms on Brendan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Nov 2022 11:14:14 -0800</lastBuildDate><atom:link href="https://blichtlealt.github.io/hugo/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>20. Valid Parentheses</title>
      <link>https://blichtlealt.github.io/hugo/blog/valid-parentheses/</link>
      <pubDate>Sun, 20 Nov 2022 11:14:14 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/valid-parentheses/</guid>
      <description>https://leetcode.com/problems/valid-parentheses/
Given a string s containing just the characters &amp;lsquo;(&amp;rsquo;, &amp;lsquo;)&amp;rsquo;, &amp;lsquo;{&amp;rsquo;, &amp;lsquo;}&amp;rsquo;, &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;, determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.
Idea: If we see a closing parenthese, that means that the most recently seen opening parenthese must be it&amp;rsquo;s complement.</description>
    </item>
    
    <item>
      <title>1. Two Sum</title>
      <link>https://blichtlealt.github.io/hugo/blog/two-sum/</link>
      <pubDate>Sun, 20 Nov 2022 10:33:33 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/two-sum/</guid>
      <description>https://leetcode.com/problems/two-sum/
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Idea: Here we construct a lookup map where the key is the number and the value is the index.</description>
    </item>
    
    <item>
      <title>79. Word Search</title>
      <link>https://blichtlealt.github.io/hugo/blog/word-search/</link>
      <pubDate>Sat, 21 Aug 2021 17:21:49 -0700</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/word-search/</guid>
      <description>https://leetcode.com/problems/word-search/
Problem Statement:Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
 Examples1: Input: board = [[&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;E&amp;#34;],[&amp;#34;S&amp;#34;,&amp;#34;F&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;S&amp;#34;],[&amp;#34;A&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;E&amp;#34;]], word = &amp;#34;ABCCED&amp;#34;Output: true Idea:Here what we do is a breadth first search, but also marking our path as we going along.</description>
    </item>
    
    <item>
      <title>55. Jump Game</title>
      <link>https://blichtlealt.github.io/hugo/blog/jump_game/</link>
      <pubDate>Wed, 23 Dec 2020 04:05:17 -0500</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/jump_game/</guid>
      <description>https://leetcode.com/problems/jump-game/
Problem Statement: Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.
ExamplesExample 1Input: nums = [2,3,1,1,4]Output: trueExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</description>
    </item>
    
    <item>
      <title>226. Invert Binary Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/invert_tree/</link>
      <pubDate>Tue, 22 Dec 2020 22:36:56 -0500</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/invert_tree/</guid>
      <description>Problem Statement: Invert a binary tree.
Idea:Here we just use a simple recursive solution. Just swap your children pointers, then call recursively on the children. Eventually everynode will swap the children pointers, and the tree will be inverted.
Solution:  void swapChildren(TreeNode* root) {  if(!root) {  return;  } else {  std::swap(root-&amp;gt;left, root-&amp;gt;right);  swapChildren(root-&amp;gt;left);  swapChildren(root-&amp;gt;right);  }  }    TreeNode* invertTree(TreeNode* root) {  swapChildren(root);  return root;  } Complexity Analysis:TimeO(H) where H is the height of the tree.</description>
    </item>
    
    <item>
      <title>191. Number of 1 Bits</title>
      <link>https://blichtlealt.github.io/hugo/blog/count_one_bits/</link>
      <pubDate>Tue, 22 Dec 2020 21:41:48 -0500</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/count_one_bits/</guid>
      <description>https://leetcode.com/problems/number-of-1-bits/
Problem Statement: Return the number of bits set to 1 in a 4 byte integer.
Idea:The idea here is to use a clever trick, created by Brian Kernighan. Instead of doing a naive O(N) traversal over the bits of the input integer, this algorthim works by removing the rightmost 1 bit iteratively until the number is zero.
Therefore, the number of iterations the algorithm takes to converge depends on the number of bits set to 1 on the input integer.</description>
    </item>
    
    <item>
      <title>994. Rotting Oranges</title>
      <link>https://blichtlealt.github.io/hugo/blog/rotting-oranges/</link>
      <pubDate>Mon, 17 Aug 2020 18:14:12 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/rotting-oranges/</guid>
      <description>https://leetcode.com/problems/rotting-oranges/
Problem Statement: In a given grid, each cell can have one of three values:
the value 0 representing an empty cell; the value 1 representing a fresh orange; the value 2 representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.
Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.</description>
    </item>
    
    <item>
      <title>200. Number of Islands</title>
      <link>https://blichtlealt.github.io/hugo/blog/number-of-islands/</link>
      <pubDate>Wed, 12 Aug 2020 23:17:44 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/number-of-islands/</guid>
      <description>https://leetcode.com/problems/number-of-islands/solution/
Problem Statement: Given a 2d grid map of &amp;lsquo;1&amp;rsquo;s (land) and &amp;lsquo;0&amp;rsquo;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
Examples1: Input: grid = [  [&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;],  [&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;],  [&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;],  [&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;] ] Output: 1 2: Input: grid = [  [&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;],  [&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;],  [&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;],  [&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;] ] Output: 3 Idea:This question is analogous to the problem of connected components in an undirected graph.</description>
    </item>
    
    <item>
      <title>129. Sum Root to Leaf Numbers</title>
      <link>https://blichtlealt.github.io/hugo/blog/sum-root-to-leaf-numbers/</link>
      <pubDate>Mon, 10 Aug 2020 23:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/sum-root-to-leaf-numbers/</guid>
      <description>https://leetcode.com/problems/sum-root-to-leaf-numbers/
Problem Statement:  Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1-&amp;gt;2-&amp;gt;3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.
Note: A leaf is a node with no children.
Examples  1: Input: [1,2,3]  1  / \  2 3 Output: 25 Explanation: The root-to-leaf path 1-&amp;gt;2 represents the number 12.</description>
    </item>
    
    <item>
      <title>257. Binary Tree Paths</title>
      <link>https://blichtlealt.github.io/hugo/blog/binary-tree-paths/</link>
      <pubDate>Mon, 10 Aug 2020 23:48:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/binary-tree-paths/</guid>
      <description>https://leetcode.com/problems/binary-tree-paths/
Problem Statement:  Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.
Examples  1: Input:   1  / \ 2 3  \  5  Output: [&amp;#34;1-&amp;gt;2-&amp;gt;5&amp;#34;, &amp;#34;1-&amp;gt;3&amp;#34;]  Explanation: All root-to-leaf paths are: 1-&amp;gt;2-&amp;gt;5, 1-&amp;gt;3 Idea:  The most intuitive way is to use a recursion here. One is going through the tree by considering at each step the node itself and its children.</description>
    </item>
    
    <item>
      <title>814. Binary Tree Pruning</title>
      <link>https://blichtlealt.github.io/hugo/blog/binary-tree-pruning/</link>
      <pubDate>Mon, 10 Aug 2020 17:46:40 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/binary-tree-pruning/</guid>
      <description>https://leetcode.com/problems/binary-tree-pruning/
Problem Statement:  We are given the head node root of a binary tree, where additionally every node&#39;s value is either a 0 or a 1. Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.
(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)
Examples  1:   2:   3:   Idea:  The idea here is to make a recursive helper function that will tell us if a given subtree contains a zero.</description>
    </item>
    
    <item>
      <title>235. Lowest Common Ancestor of a Binary Search Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/lowest-common-ancestor-bst/</link>
      <pubDate>Mon, 10 Aug 2020 11:42:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/lowest-common-ancestor-bst/</guid>
      <description>https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
Problem Statement:  Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Example:  Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5]</description>
    </item>
    
    <item>
      <title>100. Same Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/same-tree/</link>
      <pubDate>Mon, 10 Aug 2020 01:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/same-tree/</guid>
      <description>https://leetcode.com/problems/same-tree/
Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
Idea:Recursively check each node in each tree. If both are null, we&amp;rsquo;ve gone off the end so return true If one is null and the other isn&amp;rsquo;t, there is a difference. If one has a val that isn&amp;rsquo;t equal to the other, there is a difference.</description>
    </item>
    
    <item>
      <title>113. Path Sum II</title>
      <link>https://blichtlealt.github.io/hugo/blog/path-sum-ii/</link>
      <pubDate>Mon, 10 Aug 2020 00:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/path-sum-ii/</guid>
      <description>https://leetcode.com/problems/path-sum-ii/
Problem Statement:  Given a binary tree and a sum, find all root-to-leaf paths where each path&#39;s sum equals the given sum. Note: A leaf is a node with no children.
Example:  Given the below binary tree and sum = 22,  5  / \  4 8  / / \  11 13 4  / \ / \ 7 2 5 1 Return:
[  [5,4,11,2],  [5,8,4,5] ] Idea:  We can solve this using a recursive depth first search approach.</description>
    </item>
    
  </channel>
</rss>
