<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on Brendan&#39;s Blog</title>
    <link>https://blichtlealt.github.io/hugo/tags/math/</link>
    <description>Recent content in math on Brendan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Nov 2022 20:39:44 -0800</lastBuildDate><atom:link href="https://blichtlealt.github.io/hugo/tags/math/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>70. Climbing Stairs</title>
      <link>https://blichtlealt.github.io/hugo/blog/climbing-stairs/</link>
      <pubDate>Mon, 21 Nov 2022 20:39:44 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/climbing-stairs/</guid>
      <description>https://leetcode.com/problems/climbing-stairs/
You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Idea: Solution:  C = C(N - 2) + C(N - 1) C(1) = 1 C(2) = 2  class Solution { public: int climbStairs(int n) { if (n == 1) return 1; int first = 1, second = 2; for(int i = 3; i &amp;lt;= n; ++i) { int third = first + second; first = second, second = third; } return second; } }; Complexity Analysis:  Time O(N)</description>
    </item>
    
  </channel>
</rss>
