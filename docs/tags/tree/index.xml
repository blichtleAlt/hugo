<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tree on Brendan&#39;s Blog</title>
    <link>https://blichtlealt.github.io/hugo/tags/tree/</link>
    <description>Recent content in tree on Brendan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Dec 2020 22:36:56 -0500</lastBuildDate><atom:link href="https://blichtlealt.github.io/hugo/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>226. Invert Binary Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/invert_tree/</link>
      <pubDate>Tue, 22 Dec 2020 22:36:56 -0500</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/invert_tree/</guid>
      <description>Problem Statement: Invert a binary tree.
Idea:Here we just use a simple recursive solution. Just swap your children pointers, then call recursively on the children. Eventually everynode will swap the children pointers, and the tree will be inverted.
Solution:  void swapChildren(TreeNode* root) {  if(!root) {  return;  } else {  std::swap(root-&amp;gt;left, root-&amp;gt;right);  swapChildren(root-&amp;gt;left);  swapChildren(root-&amp;gt;right);  }  }    TreeNode* invertTree(TreeNode* root) {  swapChildren(root);  return root;  } Complexity Analysis:TimeO(H) where H is the height of the tree.</description>
    </item>
    
    <item>
      <title>129. Sum Root to Leaf Numbers</title>
      <link>https://blichtlealt.github.io/hugo/blog/sum-root-to-leaf-numbers/</link>
      <pubDate>Mon, 10 Aug 2020 23:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/sum-root-to-leaf-numbers/</guid>
      <description>https://leetcode.com/problems/sum-root-to-leaf-numbers/
Problem Statement:  Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1-&amp;gt;2-&amp;gt;3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.
Note: A leaf is a node with no children.
Examples  1: Input: [1,2,3]  1  / \  2 3 Output: 25 Explanation: The root-to-leaf path 1-&amp;gt;2 represents the number 12.</description>
    </item>
    
    <item>
      <title>257. Binary Tree Paths</title>
      <link>https://blichtlealt.github.io/hugo/blog/binary-tree-paths/</link>
      <pubDate>Mon, 10 Aug 2020 23:48:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/binary-tree-paths/</guid>
      <description>https://leetcode.com/problems/binary-tree-paths/
Problem Statement:  Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.
Examples  1: Input:   1  / \ 2 3  \  5  Output: [&amp;#34;1-&amp;gt;2-&amp;gt;5&amp;#34;, &amp;#34;1-&amp;gt;3&amp;#34;]  Explanation: All root-to-leaf paths are: 1-&amp;gt;2-&amp;gt;5, 1-&amp;gt;3 Idea:  The most intuitive way is to use a recursion here. One is going through the tree by considering at each step the node itself and its children.</description>
    </item>
    
    <item>
      <title>814. Binary Tree Pruning</title>
      <link>https://blichtlealt.github.io/hugo/blog/binary-tree-pruning/</link>
      <pubDate>Mon, 10 Aug 2020 17:46:40 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/binary-tree-pruning/</guid>
      <description>https://leetcode.com/problems/binary-tree-pruning/
Problem Statement:  We are given the head node root of a binary tree, where additionally every node&#39;s value is either a 0 or a 1. Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.
(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)
Examples  1:   2:   3:   Idea:  The idea here is to make a recursive helper function that will tell us if a given subtree contains a zero.</description>
    </item>
    
    <item>
      <title>235. Lowest Common Ancestor of a Binary Search Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/lowest-common-ancestor-bst/</link>
      <pubDate>Mon, 10 Aug 2020 11:42:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/lowest-common-ancestor-bst/</guid>
      <description>https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
Problem Statement:  Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Example:  Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5]</description>
    </item>
    
    <item>
      <title>100. Same Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/same-tree/</link>
      <pubDate>Mon, 10 Aug 2020 01:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/same-tree/</guid>
      <description>https://leetcode.com/problems/same-tree/
Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
Idea:Recursively check each node in each tree. If both are null, we&amp;rsquo;ve gone off the end so return true If one is null and the other isn&amp;rsquo;t, there is a difference. If one has a val that isn&amp;rsquo;t equal to the other, there is a difference.</description>
    </item>
    
    <item>
      <title>113. Path Sum II</title>
      <link>https://blichtlealt.github.io/hugo/blog/path-sum-ii/</link>
      <pubDate>Mon, 10 Aug 2020 00:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/path-sum-ii/</guid>
      <description>https://leetcode.com/problems/path-sum-ii/
Problem Statement:  Given a binary tree and a sum, find all root-to-leaf paths where each path&#39;s sum equals the given sum. Note: A leaf is a node with no children.
Example:  Given the below binary tree and sum = 22,  5  / \  4 8  / / \  11 13 4  / \ / \ 7 2 5 1 Return:
[  [5,4,11,2],  [5,8,4,5] ] Idea:  We can solve this using a recursive depth first search approach.</description>
    </item>
    
  </channel>
</rss>
