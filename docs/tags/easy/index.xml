<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>easy on Brendan&#39;s Blog</title>
    <link>https://blichtlealt.github.io/hugo/tags/easy/</link>
    <description>Recent content in easy on Brendan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Nov 2022 11:14:14 -0800</lastBuildDate><atom:link href="https://blichtlealt.github.io/hugo/tags/easy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>20. Valid Parentheses</title>
      <link>https://blichtlealt.github.io/hugo/blog/valid-parentheses/</link>
      <pubDate>Sun, 20 Nov 2022 11:14:14 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/valid-parentheses/</guid>
      <description>https://leetcode.com/problems/valid-parentheses/
Given a string s containing just the characters &amp;lsquo;(&amp;rsquo;, &amp;lsquo;)&amp;rsquo;, &amp;lsquo;{&amp;rsquo;, &amp;lsquo;}&amp;rsquo;, &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;, determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.
Idea: If we see a closing parenthese, that means that the most recently seen opening parenthese must be it&amp;rsquo;s complement.</description>
    </item>
    
    <item>
      <title>1. Two Sum</title>
      <link>https://blichtlealt.github.io/hugo/blog/two-sum/</link>
      <pubDate>Sun, 20 Nov 2022 10:33:33 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/two-sum/</guid>
      <description>https://leetcode.com/problems/two-sum/
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Idea: Here we construct a lookup map where the key is the number and the value is the index.</description>
    </item>
    
    <item>
      <title>226. Invert Binary Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/invert_tree/</link>
      <pubDate>Tue, 22 Dec 2020 22:36:56 -0500</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/invert_tree/</guid>
      <description>Problem Statement: Invert a binary tree.
Idea:Here we just use a simple recursive solution. Just swap your children pointers, then call recursively on the children. Eventually everynode will swap the children pointers, and the tree will be inverted.
Solution:  void swapChildren(TreeNode* root) {  if(!root) {  return;  } else {  std::swap(root-&amp;gt;left, root-&amp;gt;right);  swapChildren(root-&amp;gt;left);  swapChildren(root-&amp;gt;right);  }  }    TreeNode* invertTree(TreeNode* root) {  swapChildren(root);  return root;  } Complexity Analysis:TimeO(H) where H is the height of the tree.</description>
    </item>
    
    <item>
      <title>257. Binary Tree Paths</title>
      <link>https://blichtlealt.github.io/hugo/blog/binary-tree-paths/</link>
      <pubDate>Mon, 10 Aug 2020 23:48:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/binary-tree-paths/</guid>
      <description>https://leetcode.com/problems/binary-tree-paths/
Problem Statement:  Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.
Examples  1: Input:   1  / \ 2 3  \  5  Output: [&amp;#34;1-&amp;gt;2-&amp;gt;5&amp;#34;, &amp;#34;1-&amp;gt;3&amp;#34;]  Explanation: All root-to-leaf paths are: 1-&amp;gt;2-&amp;gt;5, 1-&amp;gt;3 Idea:  The most intuitive way is to use a recursion here. One is going through the tree by considering at each step the node itself and its children.</description>
    </item>
    
    <item>
      <title>235. Lowest Common Ancestor of a Binary Search Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/lowest-common-ancestor-bst/</link>
      <pubDate>Mon, 10 Aug 2020 11:42:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/lowest-common-ancestor-bst/</guid>
      <description>https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
Problem Statement:  Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Example:  Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5]</description>
    </item>
    
    <item>
      <title>100. Same Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/same-tree/</link>
      <pubDate>Mon, 10 Aug 2020 01:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/same-tree/</guid>
      <description>https://leetcode.com/problems/same-tree/
Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
Idea:Recursively check each node in each tree. If both are null, we&amp;rsquo;ve gone off the end so return true If one is null and the other isn&amp;rsquo;t, there is a difference. If one has a val that isn&amp;rsquo;t equal to the other, there is a difference.</description>
    </item>
    
  </channel>
</rss>
