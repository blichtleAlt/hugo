<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>array on Brendan&#39;s Blog</title>
    <link>https://blichtlealt.github.io/hugo/tags/array/</link>
    <description>Recent content in array on Brendan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Aug 2021 17:21:49 -0700</lastBuildDate><atom:link href="https://blichtlealt.github.io/hugo/tags/array/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>79. Word Search</title>
      <link>https://blichtlealt.github.io/hugo/blog/word-search/</link>
      <pubDate>Sat, 21 Aug 2021 17:21:49 -0700</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/word-search/</guid>
      <description>https://leetcode.com/problems/word-search/
Problem Statement:Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
 Examples1: Input: board = [[&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;E&amp;#34;],[&amp;#34;S&amp;#34;,&amp;#34;F&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;S&amp;#34;],[&amp;#34;A&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;E&amp;#34;]], word = &amp;#34;ABCCED&amp;#34;Output: true Idea:Here what we do is a breadth first search, but also marking our path as we going along.</description>
    </item>
    
    <item>
      <title>55. Jump Game</title>
      <link>https://blichtlealt.github.io/hugo/blog/jump_game/</link>
      <pubDate>Wed, 23 Dec 2020 04:05:17 -0500</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/jump_game/</guid>
      <description>https://leetcode.com/problems/jump-game/
Problem Statement: Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.
ExamplesExample 1Input: nums = [2,3,1,1,4]Output: trueExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</description>
    </item>
    
  </channel>
</rss>
