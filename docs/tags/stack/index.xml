<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stack on Brendan&#39;s Blog</title>
    <link>https://blichtlealt.github.io/hugo/tags/stack/</link>
    <description>Recent content in stack on Brendan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Nov 2022 20:06:39 -0800</lastBuildDate><atom:link href="https://blichtlealt.github.io/hugo/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>150. Evaluate Reverse Polish Notation</title>
      <link>https://blichtlealt.github.io/hugo/blog/reverse-polish-notation/</link>
      <pubDate>Mon, 21 Nov 2022 20:06:39 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/reverse-polish-notation/</guid>
      <description>https://leetcode.com/problems/evaluate-reverse-polish-notation/
Evaluate the value of an arithmetic expression in Reverse Polish Notation.
Valid operators are +, -, *, and /. Each operand may be an integer or another expression.
Note that division between two integers should truncate toward zero.
It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.</description>
    </item>
    
    <item>
      <title>232. Implement Queue using Stacks</title>
      <link>https://blichtlealt.github.io/hugo/blog/queue-with-stacks/</link>
      <pubDate>Sun, 20 Nov 2022 16:58:28 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/queue-with-stacks/</guid>
      <description>https://leetcode.com/problems/implement-queue-using-stacks/
Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).
Implement the MyQueue class:
void push(int x) Pushes element x to the back of the queue. int pop() Removes the element from the front of the queue and returns it. int peek() Returns the element at the front of the queue.</description>
    </item>
    
    <item>
      <title>20. Valid Parentheses</title>
      <link>https://blichtlealt.github.io/hugo/blog/valid-parentheses/</link>
      <pubDate>Sun, 20 Nov 2022 11:14:14 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/valid-parentheses/</guid>
      <description>https://leetcode.com/problems/valid-parentheses/
Given a string s containing just the characters &amp;lsquo;(&amp;rsquo;, &amp;lsquo;)&amp;rsquo;, &amp;lsquo;{&amp;rsquo;, &amp;lsquo;}&amp;rsquo;, &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;, determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.
Idea: If we see a closing parenthese, that means that the most recently seen opening parenthese must be it&amp;rsquo;s complement.</description>
    </item>
    
  </channel>
</rss>
