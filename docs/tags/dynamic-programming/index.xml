<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamic programming on Brendan&#39;s Blog</title>
    <link>https://blichtlealt.github.io/hugo/tags/dynamic-programming/</link>
    <description>Recent content in dynamic programming on Brendan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Nov 2022 20:39:44 -0800</lastBuildDate><atom:link href="https://blichtlealt.github.io/hugo/tags/dynamic-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>70. Climbing Stairs</title>
      <link>https://blichtlealt.github.io/hugo/blog/climbing-stairs/</link>
      <pubDate>Mon, 21 Nov 2022 20:39:44 -0800</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/climbing-stairs/</guid>
      <description>https://leetcode.com/problems/climbing-stairs/
You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Idea: Solution:  C = C(N - 2) + C(N - 1) C(1) = 1 C(2) = 2  class Solution { public: int climbStairs(int n) { if (n == 1) return 1; int first = 1, second = 2; for(int i = 3; i &amp;lt;= n; ++i) { int third = first + second; first = second, second = third; } return second; } }; Complexity Analysis:  Time O(N)</description>
    </item>
    
    <item>
      <title>55. Jump Game</title>
      <link>https://blichtlealt.github.io/hugo/blog/jump_game/</link>
      <pubDate>Wed, 23 Dec 2020 04:05:17 -0500</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/jump_game/</guid>
      <description>https://leetcode.com/problems/jump-game/
Problem Statement: Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.
ExamplesExample 1Input: nums = [2,3,1,1,4]Output: trueExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</description>
    </item>
    
  </channel>
</rss>
